@using Solutions;
@using System.Diagnostics;

<h1>Day @Number</h1>
<div>
    <a href=@TasksLink>Day @Number tasks</a>
</div>
<div>
    <a href=@InputsLink>Day @Number input</a>
</div>
<div>
    <a href=@SourceLink>Source code</a>
</div>

<EditForm Model="@_inputModel" OnValidSubmit="@HandleValidSubmit">
    <div>
        <label for="input-area">Please put this day's input here</label>
    </div>
    <div>
        <InputTextArea id="input-area" DisplayName="input-area" @bind-Value="_inputModel.Input" />
    </div>
    <button type="submit">Submit</button>
</EditForm>

@if (_isCalculating)
{
    <div>
        <label>Calculating...</label>
    </div>
}
else if (!string.IsNullOrEmpty(_calculationTimeMs))
{
    <div>
        <label>Calculation took @_calculationTimeMs ms</label>
    </div>
}

@if (!string.IsNullOrEmpty(_firstResult))
{
    <MarkupComponent Text="@_firstResult" Label="First task" />
}

@if (!string.IsNullOrEmpty(_secondResult))
{
    <MarkupComponent Text="@_secondResult" Label="Second task" />
}

@code {
    [Parameter]
    public ISolution? Solution { get; set; }

    [Parameter]
    public int Number { get; set; }

    private string TasksLink => $"https://adventofcode.com/2022/day/{Number}";

    private string InputsLink => $"https://github.com/siarhiej-h/AdventOfCode2022/raw/main/Inputs/day{Number}.txt";

    private string SourceLink => $"https://github.com/siarhiej-h/AdventOfCode2022/raw/main/AoC/Solutions/Day{Number}.cs";

    private InputModel _inputModel = new();
    private bool _isCalculating = false;
    private string _firstResult = string.Empty;
    private string _secondResult = string.Empty;
    private string _calculationTimeMs = string.Empty;

    private void HandleValidSubmit()
    {
        _isCalculating = true;
        ArgumentNullException.ThrowIfNull(Solution);
        Task.Run(() =>
        {
            var stopwatch = Stopwatch.StartNew();
            (_firstResult, _secondResult) = Solution.GetResults(_inputModel);
            _calculationTimeMs = stopwatch.ElapsedMilliseconds.ToString();
            _isCalculating = false;
            StateHasChanged();
        });
    }
}
